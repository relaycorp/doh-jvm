import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript{
  ext {
    kotlinCoroutinesVersion = '1.5.2'
    ktorVersion = '1.6.1'
    junit5Version = '5.8.2'
    okhttpVersion = '4.9.3'
  }
}

plugins {
  id("org.jetbrains.kotlin.jvm") version "1.5.20"
  id('java-library')
  id("org.jetbrains.dokka") version "1.6.20"
  id("com.diffplug.spotless") version "5.14.0"
  id('jacoco')
  id('idea')

  id('signing')
  id('maven-publish')
  id("io.github.gradle-nexus.publish-plugin") version "1.1.0"
}

apply from: 'jacoco.gradle'
apply from: 'release.gradle'

group = "tech.relaycorp"

sourceSets {
  integrationTest {
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output
  }
}

configurations {
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

repositories {
  mavenCentral()
}

dependencies {
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"

  implementation("io.ktor:ktor-client-okhttp:$ktorVersion")
  implementation("com.squareup.okhttp3:okhttp:$okhttpVersion")
  implementation("dnsjava:dnsjava:3.5.0")

  testImplementation("org.jetbrains.kotlin:kotlin-test")
  testImplementation("org.junit.jupiter:junit-jupiter:$junit5Version")
  testImplementation("org.junit.jupiter:junit-jupiter-params:$junit5Version")
  testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")
  testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinCoroutinesVersion")
  testImplementation("com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0")
  testImplementation("org.mockito:mockito-inline:4.5.1")
  testImplementation("io.ktor:ktor-client-mock:$ktorVersion")
  testImplementation("io.ktor:ktor-client-mock-jvm:$ktorVersion")
}

kotlin {
  explicitApi()
}

java {
  withJavadocJar()
  withSourcesJar()
}

tasks.withType(KotlinCompile).configureEach {
  kotlinOptions.jvmTarget = "1.8"
}

tasks.withType(KotlinCompile).all {
  kotlinOptions.freeCompilerArgs = kotlinOptions.freeCompilerArgs + [
          "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
          "-Xuse-experimental=kotlinx.coroutines.FlowPreview",
          "-Xuse-experimental=kotlin.time.ExperimentalTime"
  ]
}

test {
  useJUnitPlatform()
}

task integrationTest(type: Test) {
  description = 'Integration tests'
  group = 'verification'

  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  shouldRunAfter test

  useJUnitPlatform()
}

check.dependsOn integrationTest

// Documentation

dokkaHtml.configure {
  dokkaSourceSets {
    configureEach {
      reportUndocumented.set(true)
    }
  }
}

// Lint

spotless {
  def ktlintUserData = [
          "max_line_length": "100",
          "disabled_rules": "import-ordering"
  ]
  kotlin {
    ktlint("0.37.0").userData(ktlintUserData)
  }
  kotlinGradle {
    ktlint().userData(ktlintUserData)
  }
}
