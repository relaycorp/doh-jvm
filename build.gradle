import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript{
  ext {
    kotlinCoroutinesVersion = '1.4.2'
    ktorVersion = '1.4.1'
    junit5Version = '5.7.1'
    okhttpVersion = '4.9.1'
  }
}

plugins {
  id("org.jetbrains.kotlin.jvm") version "1.4.32"
  id('java-library')
  id("org.jetbrains.dokka") version "0.10.0"
  id("com.diffplug.spotless") version "5.11.1"
  id('jacoco')
  id('idea')

  id('signing')
  id('maven-publish')
  id("io.github.gradle-nexus.publish-plugin") version "1.0.0"
}

apply from: 'jacoco.gradle'

group = "tech.relaycorp"

sourceSets {
  integrationTest {
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output
  }
}

configurations {
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

repositories {
  mavenCentral()
}

dependencies {
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"

  implementation("io.ktor:ktor-client-okhttp:$ktorVersion")
  implementation("com.squareup.okhttp3:okhttp:$okhttpVersion")
  implementation("dnsjava:dnsjava:3.3.1")

  testImplementation("org.jetbrains.kotlin:kotlin-test")
  testImplementation("org.junit.jupiter:junit-jupiter:$junit5Version")
  testImplementation("org.junit.jupiter:junit-jupiter-params:$junit5Version")
  testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")
  testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinCoroutinesVersion")
  testImplementation("com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0")
  testImplementation("org.mockito:mockito-inline:3.8.0")
  testImplementation("io.ktor:ktor-client-mock:$ktorVersion")
  testImplementation("io.ktor:ktor-client-mock-jvm:$ktorVersion")
}

kotlin {
  explicitApi()
}

java {
  withJavadocJar()
  withSourcesJar()
}

tasks.withType(KotlinCompile).configureEach {
  kotlinOptions.jvmTarget = "1.8"
}

tasks.withType(KotlinCompile).all {
  kotlinOptions.freeCompilerArgs = kotlinOptions.freeCompilerArgs + [
          "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
          "-Xuse-experimental=kotlinx.coroutines.FlowPreview",
          "-Xuse-experimental=kotlin.time.ExperimentalTime"
  ]
}

test {
  useJUnitPlatform()
}

task integrationTest(type: Test) {
  description = 'Integration tests'
  group = 'verification'

  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  shouldRunAfter test

  useJUnitPlatform()
}

check.dependsOn integrationTest

// Documentation

tasks.dokka {
  outputFormat = "html"
  outputDirectory = "$buildDir/javadoc"
}

// Publishing

signing {
  useGpgCmd()
  required { gradle.taskGraph.hasTask("publish") }
  def signingKeyId = findProperty("signingKeyId")
  def signingKey = findProperty("signingKey")
  def signingPassword = findProperty("signingPassword")
  useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
  sign publishing.publications
}
publishing {
  publications {
    create("default", MavenPublication) {
      from(components["java"])

      pom {
        name.set(rootProject.name)
        description.set("DNS-over-HTTPS library")
        url.set("https://github.com/relaycorp/doh-jvm")
        developers {
          developer {
            id.set("relaycorp")
            name.set("Relaycorp, Inc.")
            email.set("no-reply@relaycorp.tech")
          }
        }
        licenses {
          license {
            name.set("Apache-2.0")
          }
        }
        scm {
          connection.set("scm:git:https://github.com/relaycorp/doh-jvm.git")
          developerConnection.set(
                  "scm:git:https://github.com/relaycorp/doh-jvm.git"
          )
          url.set("https://github.com/relaycorp/doh-jvm")
        }
      }
    }
  }
  repositories {
    maven {
      url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
      credentials {
        username = System.getenv("MAVEN_USERNAME")
        password = System.getenv("MAVEN_PASSWORD")
      }
    }
  }
}
nexusPublishing {
  repositories {
    sonatype {
      nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
      snapshotRepositoryUrl.set(
              uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
      )
      username.set(System.getenv("MAVEN_USERNAME"))
      password.set(System.getenv("MAVEN_PASSWORD"))
    }
  }
}
tasks.publish {
  finalizedBy("closeAndReleaseSonatypeStagingRepository")
}

// Lint

spotless {
  def ktlintUserData = [
          "max_line_length": "100",
          "disabled_rules": "import-ordering"
  ]
  kotlin {
    ktlint("0.37.0").userData(ktlintUserData)
  }
  kotlinGradle {
    ktlint().userData(ktlintUserData)
  }
}
